ggplot(murderMap, aes(x = long, y = lat, group = group, fill = GunOwnership)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend", limits = c(0.58,0.7))
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = GunOwnership)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend", limits = c(0.55,0.7))
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = GunOwnership)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend", limits = c(0.55,0.6))
summary(murderMap$MurderRate)
summary(murderMap$Murder)
summary(murderMap$Murders)
summary(murderMap$GunOwnership)
GunOwnershipRate = murderMap$GunOwnership / murderMap$Population * 100
rm(GunOwnershipRate)
murderMap$GunOwnershipRate = murderMap$GunOwnership / murderMap$Population * 100
summary(murderMap$GunOwnershipRate)
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = GunOwnershipRate)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend", limits = c(0.55,0.6))
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = GunOwnershipRate)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend"
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = GunOwnershipRate)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = GunOwnershipRate)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = GunOwnership)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
murderMap$GunOwnershipRate = NULL
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = GunOwnership)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
full = read.csv("full.csv",stringsAsFactors = FALSE)
setwd("G:/Course/Analytics edge/titanic")
library(mice)
library(ggplot2)
library(caTools)
library(rpart)
library(rpart.plot)
library(randomForest)
library(DMwR)
library(stringr)
library(caret)
library(dplyr)
library(plyr)
library(car)
library(e1071)
library(party)
library(Amelia)
library(C50)
library(mlr)
library(gbm)
library(neuralnet)
library(bartMachine)
library(partykit)
library(ROCR)
library(data.table)
library(mlbench)
library(rattle)
library(RColorBrewer)
library(doSNOW)
full = read.csv("full.csv",stringsAsFactors = FALSE)
indexes = createDataPartition(full$Survived,
times = 1,
p = 0.6,
list = FALSE)
Train = FullData[indexes,]
Temp = FullData[-indexes,]
set.seed(1612)
indexes = createDataPartition(full$Survived,
times = 1,
p = 0.6,
list = FALSE)
full = read.csv("full.csv",stringsAsFactors = FALSE)
Training = subset(full,is.na(full$Survived) == FALSE)
Testing = subset(full,!is.na(full$Survived) == FALSE)
indexes = createDataPartition(Training$Survived,
times = 1,
p = 0.6,
list = FALSE)
Train = Training[indexes,]
Temp = Training[-indexes,]
set.seed(1612)
indexes = createDataPartition(Temp$Survived,
times = 1,
p = 0.5,
list = FALSE)
Validation = Temp[indexes,]
Test = Temp[-indexes,]
rm(Temp)
prop.table(table(Train$Polarity))
prop.table(table(Train$Survived))
nrow(Train) # 789
prop.table(table(Validation$Survived))
nrow(Validation) # 262
prop.table(table(Test$Survived))
nrow(Test) # 262
set.seed(1612)
cv.folds = createMultiFolds(Train$Survived, k=10, times=5)
ctrlcv = trainControl(method = "repeatedcv", number = 10, repeats = 5,
index = cv.folds)
set.seed(1612)
cv.folds = createMultiFolds(Train$Survived, k=10, times=5)
ctrlcv = trainControl(method = "repeatedcv", number = 10, repeats = 5,
index = cv.folds)
start.time = Sys.time()
# Create a cluster to work on 3 logical cores
cl = makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
set.seed(1612)
# for rf add importance = TRUE
rf.cv.1 = caret::train(Survived ~ ., data = Train, method = "rf",
trControl = ctrlcv, tuneLength = 7,
importance = TRUE)
# stop the cluster when processing is done
stopCluster(cl)
# Check time
total.time = Sys.time() - start.time
total.time
rf.cv.1
varImpPlot(rf.cv.1$finalModel)
pred1 = predict(rf.cv.1,newdata = Validation)
confusionMatrix(Validation$Survived,pred1,positive='Positive')
View(Train)
full$Class1 = NULL
full$Class2 = NULL
full$Class3 = NULL
train = read.csv("train.csv",stringsAsFactors = FALSE,na.strings=c(""," ","NA"))
test = read.csv("test.csv",stringsAsFactors = FALSE,na.strings=c(""," ","NA"))
str(train) # 891 obs. of  12 variables
str(test) # 418 obs. of  11 variables
table(train$Survived)
train = read.csv("train.csv",stringsAsFactors = FALSE,na.strings=c(""," ","NA"))
test = read.csv("test.csv",stringsAsFactors = FALSE,na.strings=c(""," ","NA"))
str(train) # 891 obs. of  12 variables
str(test) # 418 obs. of  11 variables
table(train$Survived)
summary(train)
summary(test)
test$Survived = NA
full = rbind(train, test)
subset(full,Fare == 0)
full[which(full$Fare == 0),10] = NA
full[which(full$Fare == 0),]
str(full)
names = full$Name
title =  gsub("^.*, (.*?)\\..*$", "\\1", names)
full$Title = title
table(full$Title)
full$Title[full$Title %in% c('Rev','Dr','Col','Capt','Major')] = 'Officer'
full$Title[full$Title %in% c('Lady', 'Don','Dona','the Countess', 'Sir','Jonkheer')] = 'Royalty'
full$Title[full$Title %in% c('Mme','Mrs','Mlle')] = 'Mrs'
full$Title[full$Title %in% c('Miss','Ms')] = 'Miss'
class(full$Title)
table(full$Title)
table(full$Title)
write.csv(full,"full.csv",row.names = FALSE)
full = read.csv("full.csv",stringsAsFactors = FALSE)
str(full)
full$Name = NULL
write.csv(full,"full.csv",row.names = FALSE)
full = read.csv("full.csv",stringsAsFactors = FALSE)
str(full)
class(full$Pclass)
full$Pclass = as.factor(full$Pclass)
class(full$Pclass)
write.csv(full,"full.csv",row.names = FALSE)
full = read.csv("full.csv",stringsAsFactors = FALSE)
str(full)
full$Sex = as.factor(full$Sex)
write.csv(full,"full.csv",row.names = FALSE)
full = read.csv("full.csv",stringsAsFactors = FALSE)
str(full)
full$Embarked = as.factor(full$Embarked)
full$Embarked[which(full$Embarked == "")] = NA
summary(full$Embarked)
str(full)
setwd("G:/GIT/Titanic")
library(mice)
library(ggplot2)
library(caTools)
library(rpart)
library(rpart.plot)
library(randomForest)
library(DMwR)
library(stringr)
library(caret)
library(dplyr)
library(plyr)
library(car)
library(e1071)
library(party)
library(Amelia)
library(C50)
library(mlr)
library(gbm)
library(neuralnet)
library(bartMachine)
library(partykit)
library(ROCR)
library(data.table)
library(mlbench)
library(rattle)
library(RColorBrewer)
library(doSNOW)
train = read.csv("train.csv",stringsAsFactors = FALSE,na.strings=c(""," ","NA"))
test = read.csv("test.csv",stringsAsFactors = FALSE,na.strings=c(""," ","NA"))
str(train) # 891 obs. of  12 variables
str(test) # 418 obs. of  11 variables
table(train$Survived)
summary(train)
summary(test)
test$Survived = NA
full = rbind(train, test)
subset(full,Fare == 0)
full[which(full$Fare == 0),10] = NA
full[which(full$Fare == 0),]
str(full)
names = full$Name
title =  gsub("^.*, (.*?)\\..*$", "\\1", names)
full$Title = title
table(full$Title)
full$Title[full$Title %in% c('Rev','Dr','Col','Capt','Major')] = 'Officer'
full$Title[full$Title %in% c('Lady', 'Don','Dona','the Countess', 'Sir','Jonkheer')] = 'Royalty'
full$Title[full$Title %in% c('Mme','Mrs','Mlle')] = 'Mrs'
full$Title[full$Title %in% c('Miss','Ms')] = 'Miss'
class(full$Title)
table(full$Title)
write.csv(full,"full.csv",row.names = FALSE)
full = read.csv("full.csv",stringsAsFactors = FALSE)
str(full)
full$Name = as.character(full$Name)
full$Name[10]
strsplit(full$Name[10], split='[,.]')
strsplit(full$Name[10], split='[,.]')[[1]]
strsplit(full$Name[10], split='[,.]')[[1]][1]
full$LastName = sapply(full$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
full$LastName = sub(' ', '', full$LastName)
table(full$LastName)
write.csv(full,"full.csv",row.names = FALSE)
full = read.csv("full.csv",stringsAsFactors = FALSE)
class(full$Pclass)
full$Pclass = as.factor(full$Pclass)
write.csv(full,"full.csv",row.names = FALSE)
full = read.csv("full.csv",stringsAsFactors = FALSE)
str(full)
full$Title = as.factor(full$Title)
str(full)
class(full$Pclass)
full$Pclass = as.factor(full$Pclass)
write.csv(full,"full.csv",row.names = FALSE)
full = read.csv("full.csv",stringsAsFactors = FALSE)
str(full)
full$Pclass = as.factor(full$Pclass)
class(full$Pclass)
write.csv(full,"full.csv",row.names = FALSE)
full = read.csv("full.csv",stringsAsFactors = FALSE)
str(full)
full$Pclass = as.factor(full$Pclass)
class(full$Pclass)
write.csv(full,"full.csv",row.names = FALSE)
full = read.csv("full.csv",stringsAsFactors = FALSE)
str(full)
full$Sex = as.factor(full$Sex)
write.csv(full,"full.csv",row.names = FALSE)
full = read.csv("full.csv",stringsAsFactors = FALSE)
str(full)
full$Sex = as.factor(full$Sex)
str(full)
full = read.csv("full.csv",stringsAsFactors = FALSE)
str(full)
full$Name = NULL
write.csv(full,"full.csv",row.names = FALSE)
full = read.csv("full.csv",stringsAsFactors = FALSE)
str(full)
full$Family_Count = full$SibSp + full$Parch + 1
full$FamilySize[full$Family_Count == 1] = 'Single'
full$FamilySize[full$Family_Count < 5 & full$Family_Count >= 2] = 'Small'
full$FamilySize[full$Family_Count >= 5] = 'Big'
table(full$FamilySize)
table(full$Family_Count)
full$Ticket_No = full$Ticket
for(i in 1:nrow(full)){
if(full$Ticket_No[i] == "LINE"){
full$Ticket_No[i] = "101"
}else{
a = sub(".*? (.+)", "\\1", full$Ticket[i])
full$Ticket_No[i] = sub(".*? (.+)", "\\1", a)
}
}
str(full)
full$Ticket_No = as.numeric(full$Ticket_No)
str(full)
write.csv(full,"full.csv",row.names = FALSE)
full = read.csv("full.csv",stringsAsFactors = FALSE)
str(full)
write.csv(full,"full.csv",row.names = FALSE)
full = read.csv("full.csv",stringsAsFactors = FALSE)
str(full)
for(i in 1:nrow(full)){
ticket = full$Ticket_No[i]
full$Ticket_Count[i] = nrow(subset(full,Ticket_No == ticket))
}
full$TicketSize[full$Ticket_Count == 1] = 'Single'
full$TicketSize[full$Ticket_Count >= 2 & full$Ticket_Count < 5] = 'Small'
full$TicketSize[full$Ticket_Count >= 5] = 'Big'
str(full)
write.csv(full,"full.csv",row.names = FALSE)
full = read.csv("full.csv",stringsAsFactors = FALSE)
str(full)
plot(na.omit(full$Fare),full$Family_Count)
ggplot(na.omit(full),aes(x = Fare, y = full$Family_Count))
na.omit(full)
subset(full,na.omit(full))
subset(full,is.na(full) == FALSE)
ggplot(subset(full,is.na(full) == FALSE),aes(x = Fare, y = full$Family_Count))
a = subset(full,is.na(full) == FALSE)
ggplot(a,aes(x = Fare, y = full$Family_Count))
ggplot(a,aes(x = Fare, y = Family_Count))
ggplot(a,aes(x = Fare, y = Family_Count)) +
geom_point()
ggplot(a,aes(x = Fare, y = Pclass)) +
geom_point()
str(full)
ggplot(a,aes(x = Fare, y = Ticket_No)) +
geom_point()
ggplot(a,aes(x = Fare, y = Ticket_Count)) +
geom_point()
ggplot(a,aes(x = SibSp, y = Parch)) +
geom_point()
ggplot(a,aes(x = Age, y = Fare)) +
geom_point()
ggplot(a,aes(x = Age, y = log(Fare))) +
geom_point()
ggplot(a,aes(x = log(Age), y = Fare)) +
geom_point()
ggplot(a,aes(x = Age, y = Fare)) +
geom_point()
ggplot(a,aes(x = LastName, y = Fare)) +
geom_point()
str(full)
ggplot(a,aes(x = Fare, y = (Age+Pclass))) +
geom_point()
ggplot(a,aes(x = Fare, y = log(Age+Pclass))) +
geom_point()
ggplot(a,aes(x = Fare, y = (Age+Pclass))) +
geom_point()
ggplot(a,aes(x = log(Fare), y = (Age+Pclass))) +
geom_point()
str(full)
ggplot(a,aes(x = Fare, y = Pclass,fill = Title)) +
geom_point()
ggplot(a,aes(x = Fare, y = Pclass,fill = factor(Title))) +
geom_point()
ggplot(a,aes(x = Fare, y = Pclass),fill = factor(Title)) +
geom_point()
ggplot(a,aes(x = Fare, y = Pclass,fill = factor(Title))) +
geom_point()
ggplot(a,aes(x = Fare, y = log(Pclass),fill = factor(Title))) +
geom_point()
ggplot(a,aes(x = Fare, y = Pclass,fill = factor(Title))) +
geom_point()
ggplot(a,aes(x = Fare, y = Pclass)) +
geom_point()
str(full)
full = read.csv("full.csv",stringsAsFactors = FALSE)
Training = subset(full,is.na(full$Embarked) == FALSE)
Testing = subset(full,!is.na(full$Embarked) == FALSE)
set.seed(1612)
indexes = createDataPartition(Training$Embarked,
times = 1,
p = 0.6,
list = FALSE)
Train = Training[indexes,]
Temp = Training[-indexes,]
set.seed(1612)
indexes = createDataPartition(Temp$Embarked,
times = 1,
p = 0.5,
list = FALSE)
Validation = Temp[indexes,]
Test = Temp[-indexes,]
rm(Temp)
full = read.csv("full.csv",stringsAsFactors = FALSE)
Training = subset(full,is.na(full$Embarked) == FALSE)
Testing = subset(full,!is.na(full$Embarked) == FALSE)
set.seed(1612)
indexes = createDataPartition(Training$Embarked,
times = 1,
p = 0.6,
list = FALSE)
Train = Training[indexes,]
Temp = Training[-indexes,]
indexes = createDataPartition(Temp$Embarked,
times = 1,
p = 0.5,
list = FALSE)
Validation = Temp[indexes,]
prop.table(table(Train$Embarked))
rm(Temp)
set.seed(1612)
Test = Temp[-indexes,]
setwd("G:/GIT/Titanic")
library(mice)
library(ggplot2)
library(caTools)
library(rpart)
library(rpart.plot)
library(randomForest)
library(DMwR)
library(stringr)
library(caret)
library(dplyr)
library(plyr)
library(car)
library(e1071)
library(party)
library(Amelia)
library(C50)
library(mlr)
library(gbm)
library(neuralnet)
library(bartMachine)
library(partykit)
library(ROCR)
library(data.table)
library(mlbench)
library(rattle)
library(RColorBrewer)
library(doSNOW)
full = read.csv("full.csv",stringsAsFactors = FALSE)
Training = subset(full,is.na(full$Embarked) == FALSE)
Testing = subset(full,!is.na(full$Embarked) == FALSE)
set.seed(1612)
indexes = createDataPartition(Training$Embarked,
times = 1,
p = 0.6,
list = FALSE)
Train = Training[indexes,]
Temp = Training[-indexes,]
set.seed(1612)
indexes = createDataPartition(Temp$Embarked,
times = 1,
p = 0.5,
list = FALSE)
Validation = Temp[indexes,]
Test = Temp[-indexes,]
rm(Temp)
prop.table(table(Train$Embarked))
nrow(Train) # 789
prop.table(table(Validation$Survived))
prop.table(table(Validation$Embarked))
nrow(Validation) # 262
prop.table(table(Test$Embarked))
nrow(Validation) # 262
prop.table(table(Test$Embarked))
nrow(Test) # 262
head(Train,2)
set.seed(1612)
cv.folds = createMultiFolds(Train$Embarked, k=10, times=5)
ctrlcv = trainControl(method = "repeatedcv", number = 10, repeats = 5,
index = cv.folds)
full$Ticket = NULL
write.csv(full,"full.csv",row.names = FALSE)
full = read.csv("full.csv",stringsAsFactors = FALSE)
str(full)
Training = subset(full,is.na(full$Embarked) == FALSE)
Testing = subset(full,!is.na(full$Embarked) == FALSE)
set.seed(1612)
indexes = createDataPartition(Training$Embarked,
times = 1,
p = 0.6,
list = FALSE)
Train = Training[indexes,]
Temp = Training[-indexes,]
set.seed(1612)
indexes = createDataPartition(Temp$Embarked,
times = 1,
p = 0.5,
list = FALSE)
Validation = Temp[indexes,]
Test = Temp[-indexes,]
rm(Temp)
prop.table(table(Train$Embarked))
#          C          Q          S
# 0.20636943 0.09426752 0.69936306
nrow(Train) # 785
prop.table(table(Validation$Embarked))
#          C          Q          S
# 0.20769231 0.09230769 0.70000000
nrow(Validation) # 262
prop.table(table(Test$Embarked))
#          C          Q          S
# 0.20769231 0.09230769 0.70000000
nrow(Test) # 260
#===============================================
# Model 1
#===============================================
head(Train,2)
##
set.seed(1612)
cv.folds = createMultiFolds(Train$Embarked, k=10, times=5)
ctrlcv = trainControl(method = "repeatedcv", number = 10, repeats = 5,
index = cv.folds)
start.time = Sys.time()
# Create a cluster to work on 3 logical cores
cl = makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
set.seed(1612)
# for rf add importance = TRUE
rf.cv.1 = caret::train(Embarked ~ Pclass+Sex+SibSp+Parch+Title+LastName+Family_Count+FamilySize+Ticket_No+Ticket_Count+TicketSize,
data = Train, method = "rf",trControl = ctrlcv,
tuneLength = 7, importance = TRUE)
# stop the cluster when processing is done
stopCluster(cl)
# Check time
total.time = Sys.time() - start.time
total.time
setwd("G:/GIT/Script Repo/R/clustering")
movies = read.table("movieLens.txt", header=FALSE, sep="|",quote="\"")
rf.cv.1
varImpPlot(rf.cv.1$finalModel)
pred1 = predict(rf.cv.1,newdata = Validation)
pred1 = predict(rf.cv.1,newdata = Validation)
str(Training)
summary(Training$Ticket_No)
